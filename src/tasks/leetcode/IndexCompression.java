package tasks.leetcode;

public class IndexCompression {
    /*
    Стиснення інвертованих індексів є важливим для збереження простору та покращення ефективності пошуку.
     Декілька методів може бути використано для стиснення таких списків:

    1. Кодування різниці:
    Оскільки docIds знаходяться в порядку зростання, замість зберігання абсолютного значення кожного docId,
     зберігайте різницю (дельта) від попереднього docId. Дельта - це зазвичай набагато менші числа, ніж фактичні docIds, і їх можна зберігати ефективніше.

    Наприклад, дані docIds:
    100, 105, 110, 115

    Список з кодуванням різниці:
    100, 5, 5, 5

    2. Кодування змінної довжини:
    Спільно з кодуванням дельти використовуйте кодування змінної довжини, як VByte, для кодування цілих чисел.
    Числа з меншими дельтами займають менше байтів.

    3. Кодування довжини пробігу (RLE):
    Цей метод особливо ефективний для частих термінів, які з'являються у великих послідовних блоках docIds.
     Якщо термін з'являється у 10,000 послідовних документах, замість зберігання 10,000 docIds, ви можете зберегти початковий docId та довжину пробігу.

    4. Використання бітової карти:
    Для дуже частих термінів використовуйте бітову карту, де кожен біт представляє наявність (1) або відсутність (0) терміна у документі,
    що відповідає положенню біта. Потім цю бітову карту можна стиснути за допомогою технік,
    таких як WAH (Word-Aligned Hybrid) або EWAH (Enhanced Word-Aligned Hybrid).

    5. Стиснення на основі груп:
    Розділіть список docIds на блоки фіксованого розміру. Для кожного блоку зберігайте початковий docId,
    а потім дельта для решти docIds у цьому блоку. Це дозволяє випадковий доступ у списку.

    6. Стиснення частоти:
    Використовуйте менше бітів для більш загальних частот. Якщо частота терміна зазвичай 1 або 2,
     ви можете використовувати коротші коди для цих частот та довші коди для рідше зустрічаних частот.

    7. Вказівники пропуску:
    Для прискорення обходу списку, особливо для запитів AND, вставляйте вказівники пропуску в постінг-списки.
    Це означає, що, скануючи постінг-список, ви можете пропустити сегменти docIds, які, як ви знаєте, не збігаються з іншими термінами.

    При впровадженні цих методів важливо знайти рівновагу між ступенем стиснення та швидкістю таких операцій,
    як обхід списку, злиття та перетин. Крім того, деякі методи більше підходять для конкретних сценаріїв,
    і поєднання кількох методів може призвести до оптимальних результатів.
     */
}
